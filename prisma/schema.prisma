// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       Int                      @id @default(autoincrement())
  code                     String                   @db.VarChar(20) @unique
  name                     String                   @db.VarChar(255)
  active                   Boolean                  @default(true)
  accountCodeId            Int                      @unique
  accountCode              AccountCode              @relation(fields: [accountCodeId], references: [id])
  accountTypeId            Int             
  accountType              AccountType              @relation(fields: [accountTypeId], references: [id])
  ledgers                  Ledger[]
  budgetAccountAssignment  BudgetAccountAssignment?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
}

model AccountType {
  id               Int         @id @default(autoincrement())
  name             String      @db.VarChar(20) @unique
  direction        Int         @db.TinyInt
  ledgerDirection  Int         @db.TinyInt
  accounts         Account[]
}

model AccountCode {
  id               Int            @id @default(autoincrement())
  code             Int
  virtualParentId  Int            @default(0)
  parentId         Int?          
  parent           AccountCode?   @relation("AccountCodeChild", fields: [parentId], references: [id])  
  childs           AccountCode[]  @relation("AccountCodeChild")
  account          Account?
  
  @@unique([code, parentId])
  @@unique([code, virtualParentId])
}

model Ledger {
  id            Int        @id @default(autoincrement())
  balance       BigInt
  open          Boolean    @default(true)
  accountId     Int
  account       Account    @relation(fields: [accountId], references: [id])
  entries       Entry[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?    
}

model Journal {
  id                 Int                 @id @default(autoincrement())
  description        String              @db.VarChar(255)
  entries            Entry[]
  budgetTransaction  BudgetTransaction?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
}

model Entry {
  id           Int        @id @default(autoincrement())
  description  String?    @db.VarChar(255)
  direction    Int        @db.TinyInt
  amount       BigInt
  balance      BigInt
  journalId    Int
  journal      Journal    @relation(fields: [journalId], references: [id])
  ledgerId     Int
  ledger       Ledger     @relation(fields: [ledgerId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
}

model Budget {
  id                  Int                         @id @default(autoincrement())
  code                String                      @db.VarChar(20) @unique
  name                String                      @db.VarChar(255)
  description         String?                     @db.VarChar(255)
  active              Boolean                     @default(true)
  accountAssignments  BudgetAccountAssignment[]
  budgetTransactions  BudgetTransaction[]
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
}

model BudgetAccountAssignment {
  id          Int                 @id @default(autoincrement())
  taskId      Int
  task        BudgetAccountTask   @relation(fields: [taskId], references: [id])
  budgetId    Int
  budget      Budget              @relation(fields: [budgetId], references: [id])
  accountId   Int                 @unique
  account     Account?            @relation(fields: [accountId], references: [id]) 
}

model BudgetAccountTask {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(20) @unique
  budgetAccountAssignments  BudgetAccountAssignment[]
}

model BudgetTransaction {
  id                 Int                    @id @default(autoincrement())
  description        String                 @db.VarChar(255)
  transactionTypeId  Int                         
  transactionType    BudgetTransactionType  @relation(fields: [transactionTypeId], references: [id])
  journalId          Int                    @unique
  journal            Journal                @relation(fields: [journalId], references: [id])
  budgetId           Int
  budget             Budget                 @relation(fields: [budgetId], references: [id])
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  deletedAt          DateTime?
}

model BudgetTransactionType {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(20) @unique
  budgetTransactions  BudgetTransaction[]
}

model User {
  id              String            @id @default(cuid())
  name            String?           
  username        String?           @unique
  email           String?           @unique
  emailVerified   DateTime?         @map(name: "email_verified")
  password        String?
  image           String?
  sessions        Session[]
  accounts        UserAccount[]
  authenticators  Authenticator[]
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")
}

model UserAccount {
  id                        Int           @id @default(autoincrement())
  userId                    String        @map(name: "user_id")
  type                      String
  provider                  String
  providerAccountId         String        @map(name: "provider_account_id")
  refresh_token             String?       @db.Text
  access_token              String?       @db.Text    
  expires_at                Int?        
  token_type                String?     
  scope                     String?
  id_token                  String?       @db.Text
  session_state             String?       
  refresh_token_expires_in  Int?          
  createdAt                 DateTime      @default(now()) @map(name: "created_at")
  updatedAt                 DateTime      @updatedAt @map(name: "updated_at")

  user                      User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])

  @@map(name: "user_account")
}

model Session {
  id            Int       @id @default(autoincrement())
  sessionToken  String    @unique @map("session_token")
  userId        String    @map(name: "user_id")
  expires       DateTime  
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at") 

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id            Int         @id @default(autoincrement())
  identifier    String
  token         String
  expires       DateTime

  @@unique([identifier, token])
  
  @@map(name: "verification_token")
}

model Authenticator {
  id                    Int         @id @default(autoincrement())
  credentialID          String      @unique @map(name: "credential_id")
  userId                String      @map(name: "user_id")
  providerAccountId     String      @map(name: "provider_account_id")
  credentialPublicKey   String      @map(name: "credential_public_key")
  counter               Int
  credentialDeviceType  String      @map(name: "credential_device_type")
  credentialBackedUp    Boolean     @map(name: "credential_backed_up")  
  transports            String?

  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}