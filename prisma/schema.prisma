// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  Int           @id @default(autoincrement())
  accountCodeId       Int           @unique
  accountCode         AccountCode   @relation(fields: [accountCodeId], references: [id])
  name                String        @db.VarChar(255)
  balance             BigInt
  direction           Int           @db.TinyInt
  stateId             Int           @default(1)
  state               State         @relation(fields: [stateId], references: [id])
  entries             Entry[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model AccountCode {
  id                  Int           @id @default(autoincrement())
  accountType         String?       @db.VarChar(40)
  code                Int           @default(1)
  accountSupercodeId  Int?          
  accountSupercode    AccountCode?  @relation("AccountSubcode", fields: [accountSupercodeId], references: [id])  
  accountSubcode      AccountCode[] @relation("AccountSubcode")
  account             Account?
  
  @@unique([code, accountSupercodeId])
}

model Ledger {
  id                  Int           @id @default(autoincrement())
  code                Int?
  description         String        @db.VarChar(255)
  entries             Entry[]
  correctedLedgerId   Int?          @unique
  correctedLedger     Ledger?       @relation("CorrectionLedger", fields: [correctedLedgerId], references: [id])
  corrector           Ledger?       @relation("CorrectionLedger")
  stateId             Int           @default(1)
  state               State         @relation(fields: [stateId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Entry {
  id                  Int           @id @default(autoincrement())
  ledgerId            Int
  ledger              Ledger        @relation(fields: [ledgerId], references: [id])
  accountId           Int
  account             Account       @relation(fields: [accountId], references: [id])
  amount              BigInt
  balance             BigInt
  direction           Int           @db.TinyInt
} 

model State {
  id                  Int           @id
  name                String        @db.VarChar(40) @unique
  accounts            Account[]
  ledger              Ledger[]
}