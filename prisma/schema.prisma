// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       Int                      @id @default(autoincrement())
  name                     String                   @db.VarChar(255)
  active                   Boolean                  @default(true)
  accountCodeId            Int                      @unique
  accountCode              AccountCode              @relation(fields: [accountCodeId], references: [id])
  accountTypeId            Int             
  accountType              AccountType              @relation(fields: [accountTypeId], references: [id])
  ledgers                  Ledger[]
  budgetAccountAssignment  BudgetAccountAssignment?
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
}

model AccountType {
  id               Int         @id @default(autoincrement())
  name             String      @db.VarChar(20) @unique
  direction        Int         @db.TinyInt
  ledgerDirection  Int         @db.TinyInt
  accounts         Account[]
}

model AccountCode {
  id               Int            @id @default(autoincrement())
  code             Int
  virtualParentId  Int            @default(0)
  parentId         Int?          
  parent           AccountCode?   @relation("AccountCodeChild", fields: [parentId], references: [id])  
  childs           AccountCode[]  @relation("AccountCodeChild")
  account          Account?
  
  @@unique([code, virtualParentId])
}

model Ledger {
  id            Int        @id @default(autoincrement())
  balance       BigInt
  open          Boolean    @default(true)
  softDeleted   Boolean    @default(false)
  accountId     Int
  account       Account    @relation(fields: [accountId], references: [id])
  entries       Entry[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Journal {
  id                 Int                 @id @default(autoincrement())
  description        String              @db.VarChar(255)
  softDeleted        Boolean             @default(false)
  entries            Entry[]
  budgetTransaction  BudgetTransaction?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Entry {
  id           Int        @id @default(autoincrement())
  description  String?    @db.VarChar(255)
  direction    Int        @db.TinyInt
  amount       BigInt
  balance      BigInt
  softDeleted  Boolean    @default(false)
  journalId    Int
  journal      Journal    @relation(fields: [journalId], references: [id])
  ledgerId     Int
  ledger       Ledger     @relation(fields: [ledgerId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Budget {
  id                  Int                         @id @default(autoincrement())
  name                String                      @db.VarChar(255)
  active              Boolean                     @default(true)
  accountAssignments  BudgetAccountAssignment[]
  budgetTransactions  BudgetTransaction[]
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
}

model BudgetAccountAssignment {
  id          Int                 @id @default(autoincrement())
  taskId      Int
  task        BudgetAccountTask   @relation(fields: [taskId], references: [id])
  budgetId    Int
  budget      Budget              @relation(fields: [budgetId], references: [id])
  accountId   Int                 @unique
  account     Account?            @relation(fields: [accountId], references: [id]) 
}

model BudgetAccountTask {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.VarChar(20) @unique
  budgetAccountAssignments  BudgetAccountAssignment[]
}

model BudgetTransaction {
  id                 Int                    @id @default(autoincrement())
  description        String                 @db.VarChar(255)
  softDeleted        Boolean                @default(false)
  transactionTypeId  Int                         
  transactionType    BudgetTransactionType  @relation(fields: [transactionTypeId], references: [id])
  journalId          Int                    @unique
  journal            Journal                @relation(fields: [journalId], references: [id])
  budgetId           Int
  budget             Budget                 @relation(fields: [budgetId], references: [id])
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model BudgetTransactionType {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(20) @unique
  budgetTransactions  BudgetTransaction[]
}