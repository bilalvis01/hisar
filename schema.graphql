scalar DateTime
scalar Money

enum SortOrder {
    ASC
    DESC
}

type ExcerptReport {
    budget: Money!
    expense: Money!
    balance: Money!
}

type Budget {
    code: String!
    name: String!
    description: String
    amount: Money!
    expense: Money!
    balance: Money!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BudgetTransaction {
    id: String!
    budgetCode: String!
    budgetName: String!
    description: String!
    amount: Money!
    balance: Money!
    transactionType: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Query {
    excerptReport: ExcerptReport!
    budgets: [Budget!]!
    budgetByCode(input: GetBudgetByCodeInput!): Budget!
    budgetTransactions(input: GetBudgetTransactionsInput!): [BudgetTransaction!]!
    budgetTransactionById(input: GetBudgetTransactionByIdInput!): BudgetTransaction!
}

type Mutation {
    createBudget(input: CreateBudgetInput!): Budget!
    updateBudget(input: UpdateBudgetInput!): Budget!
    deleteBudget(input: DeleteBudgetInput!): [Budget!]!
    createExpense(input: CreateExpenseInput!): BudgetTransaction!
    updateExpense(input: UpdateExpenseInput!): BudgetTransaction!
    deleteExpense(input: DeleteExpenseInput!): [BudgetTransaction!]!
}

input GetBudgetByCodeInput {
    code: String!
}

input CreateBudgetInput {
    name: String!
    description: String
    amount: Money!
}

input UpdateBudgetInput {
    code: String!
    name: String!
    description: String
    amount: Money!
}

input DeleteBudgetInput {
    codes: [String!]!
}

input GetBudgetTransactionsInput {
    budgetCode: String
    transactionType: String
    sortOrder: SortOrder
}

input CreateExpenseInput {
    budgetCode: String!
    description: String!
    amount: Money!
}

input GetBudgetTransactionByIdInput {
    id: String!
    transactionType: String
}

input UpdateExpenseInput {
    id: String!
    budgetCode: String!
    description: String!
    amount: Money!
}

input DeleteExpenseInput {
    ids: [String!]!
}