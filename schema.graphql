scalar DateTime
scalar Money

enum SortOrder {
    ASC
    DESC
}

type ExcerptReport {
    budget: Money!
    expense: Money!
    balance: Money!
}

type Budget {
    code: String!
    name: String!
    amount: Money!
    expense: Money!
    balance: Money!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type BudgetTransaction {
    id: String!
    budgetCode: String!
    budgetName: String!
    description: String!
    amount: Money!
    balance: Money!
    transactionType: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Query {
    excerptReport: ExcerptReport!
    budgets: [Budget!]!
    budgetByCode(input: GetBudgetByCodeInput!): GetBudgetByCodePayload!
    budgetTransactions(input: GetBudgetTransactionsInput!): [BudgetTransaction!]!
    budgetTransactionById(input: GetBudgetTransactionByIdInput!): GetBudgetTransactionByIdPayload!
}

type Mutation {
    createBudget(input: CreateBudgetInput!): CreateBudgetPayload!
    updateBudget(input: UpdateBudgetInput!): UpdateBudgetPayload!
    deleteBudget(input: DeleteBudgetInput!): DeleteBudgetPayload!
    deleteBudgetMany(input: DeleteBudgetManyInput!): DeleteBudgetManyPayload!
    createExpense(input: CreateExpenseInput!): CreateExpensePayload!
    updateExpense(input: UpdateExpenseInput!): UpdateExpensePayload!
    deleteExpense(input: DeleteExpenseInput!): DeleteExpensePayload!
    deleteExpenseMany(input: DeleteExpenseManyInput!): DeleteExpenseManyPayload!
}

input GetBudgetByCodeInput {
    code: String!
}

type GetBudgetByCodePayload {
    code: Int!
    success: Boolean!
    message: String!
    budget: Budget
}

input CreateBudgetInput {
    name: String!
    amount: Money!
}

type CreateBudgetPayload {
    code: Int!
    success: Boolean!
    message: String!
    budget: Budget
}

input UpdateBudgetInput {
    code: String!
    name: String!
    amount: Money!
}

type UpdateBudgetPayload {
    code: Int!
    success: Boolean!
    message: String!
    budget: Budget
}

input DeleteBudgetInput {
    code: String!
}

type DeleteBudgetPayload {
    code: Int!
    success: Boolean!
    message: String!
    budget: Budget
}

input DeleteBudgetManyInput {
    codes: [String!]!
}

type DeleteBudgetManyPayload {
    code: Int!
    success: Boolean!
    message: String!
    budgets: [Budget!]
}

input GetBudgetTransactionsInput {
    budgetCode: String
    transactionType: String
    sortOrder: SortOrder
}

type GetBudgetTransactionsPayload {
    code: Int!
    success: Boolean!
    message: String!
    budgetTransactions: [BudgetTransaction!]!
}

type CreateExpensePayload {
    code: Int!
    success: Boolean!
    message: String!
    expense: BudgetTransaction
}

input CreateExpenseInput {
    budgetCode: String!
    description: String!
    amount: Money!
}

type GetBudgetTransactionByIdPayload {
    code: Int!
    success: Boolean!
    message: String!
    budgetTransaction: BudgetTransaction
}

input GetBudgetTransactionByIdInput {
    id: String!
    transactionType: String
}

input UpdateExpenseInput {
    id: String!
    budgetCode: String!
    description: String!
    amount: Money!
}

type UpdateExpensePayload {
    code: Int!
    success: Boolean!
    message: String!
    expense: BudgetTransaction
}

input DeleteExpenseInput {
    id: String!
}

type DeleteExpensePayload {
    code: Int!
    success: Boolean!
    message: String!
    expense: BudgetTransaction
}

input DeleteExpenseManyInput {
    ids: [String!]!
}

type DeleteExpenseManyPayload {
    code: Int!
    success: Boolean!
    message: String!
    expenses: [BudgetTransaction!]
}