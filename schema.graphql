scalar DateTimeIso

type Query {
    excerptReport: ExcerptReport!
    budgets: [Budget!]!
    budgetByCode(code: String!): Budget!
    expenses: [Expense!]!
}

type Mutation {
    createBudget(input: CreateBudgetInput!): CreateBudgetPayload!
    updateBudget(input: UpdateBudgetInput!): UpdateBudgetPayload!
    addExpense(input: AddExpenseInput!): AddExpensePayload!
}

type ExcerptReport {
    budget: Int!
    expense: Int!
    balance: Int!
}

type Budget {
    id: Int!
    code: String!
    name: String!
    budget: Int!
    expense: Int!
    balance: Int!
    expenseDetail: [BudgetExpenses!]!
    createdAt: DateTimeIso!
    updatedAt: DateTimeIso!
}

type BudgetExpenses {
    description: String!
    debit: Int
    credit: Int
    balance: Int!
}

type CreateBudgetPayload {
    code: Int!
    success: Boolean!
    message: String!
    budget: Budget
}

input CreateBudgetInput {
    name: String!
    budget: Int!
}

input UpdateBudgetInput {
    code: String!
    name: String!
    balance: Int!
}

type UpdateBudgetPayload {
    code: Int!
    success: Boolean!
    message: String!
    budget: Budget
}

type AddExpensePayload {
    code: Int!
    success: Boolean!
    message: String!
    expense: Expense
}

input AddExpenseInput {
    budgetAccountId: Int!
    description: String!
    amount: Int!
}

type Expense {
    id: Int!
    budgetAccountId: Int!
    budgetAccount: String!
    amount: Int!
    description: String!
    createdAt: DateTimeIso!
    updatedAt: DateTimeIso!
}