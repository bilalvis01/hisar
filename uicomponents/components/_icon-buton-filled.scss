@use "../component-tokens" as comp;

.icon-button.filled {
    @each $key, $value in comp.$icon-button-filled {
        --#{$key}: #{$value};
    }
    --corner-radius: calc(var(--icon-button-filled-container-size) * 0.5);
    --container-width: var(--icon-button-filled-container-width);
    --container-height: var(--icon-button-filled-container-height);
    --container-shape: var(--icon-button-filled-container-shape);
    --container-color: var(--icon-button-filled-container-color);
    --outline-style: none;
    --outline-color: unset;
    --outline-width: unset;
    --outline-offset: unset;
    --state-layer-color: transparent;
    --state-layer-width: 100%;
    --state-layer-height: 100%;
    --state-layer-shape: var(--icon-button-filled-container-shape);
    --icon-color: var(--icon-button-filled-icon-color);
    --icon-width: var(--icon-button-filled-icon-size);
    --icon-height: var(--icon-button-filled-icon-size);

    &.toggle {
        --container-color: var(--icon-button-filled-unselected-container-color);
        --icon-color: var(--icon-button-filled-unselected-icon-color);
        
        &.selected {
            --container-color: var(--icon-button-filled-selected-container-color);
            --icon-color: var(--icon-button-filled-selected-icon-color);
        }
    }

    &:hover {
        @each $key, $value in comp.$icon-button-filled-hover {
            --#{$key}: #{$value};
        }
        --state-layer-color: rgba(var(--icon-button-filled-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));

        &.toggle {
            --state-layer-color: rgba(var(--icon-button-filled-unselected-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));

            &.selected {
                --state-layer-color: rgba(var(--icon-button-filled-selected-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));
            }
        }
    }

    &:focus {
        @each $key, $value in comp.$icon-button-filled-focus {
            --#{$key}: #{$value};
        }

        --state-layer-color: rgba(var(--icon-button-filled-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));

        &.toggle {
            --state-layer-color: rgba(var(--icon-button-filled-unselected-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));

            &.selected {
                --state-layer-color: rgba(var(--icon-button-filled-selected-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));
            }
        }
        
        &.focus-indicator {
            --outline-style: solid;
            --outline-color: var(--icon-button-filled-indicator-color);
            --outline-width: var(--icon-button-filled-indicator-thickness);
            --outline-offset: var(--icon-button-filled-indicator-offset);
        }
    }

    &:active {
        @each $key, $value in comp.$icon-button-filled-pressed {
            --#{$key}: #{$value};
        }

        --state-layer-color: rgba(var(--icon-button-filled-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));

        &.toggle {
            --state-layer-color: rgba(var(--icon-button-filled-unselected-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));

            &.selected {
                --state-layer-color: rgba(var(--icon-button-filled-selected-state-layer-color-rgb), var(--icon-button-filled-state-layer-opacity));
            }
        }
        
        &.focus-indicator {
            --outline-style: none;
            --outline-color: unset;
            --outline-width: unset;
            --outline-offset: unset;
        }
    }

    &:disabled {
        @each $key, $value in comp.$icon-button-filled-disabled {
            --#{$key}: #{$value};
        }  
        --container-color: rgba(var(--icon-button-filled-container-color-rgb), var(--icon-button-filled-container-opacity));
        --state-layer-color: transparent;
        --icon-color: rgba(var(--icon-button-filled-icon-color-rgb), var(--icon-button-filled-icon-opacity));
    }
}